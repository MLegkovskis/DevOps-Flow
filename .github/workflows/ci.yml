name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # ------------------------------------------------------
  #  1) Build & Test
  # ------------------------------------------------------
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Maven Test
        run: mvn --batch-mode clean test


  # ------------------------------------------------------
  #  2) Build the WAR file
  # ------------------------------------------------------
  build-war:
    name: Build WAR
    runs-on: ubuntu-latest
    needs: [build-test]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Maven Package
        run: mvn --batch-mode clean package

      - name: Archive WAR artifact
        uses: actions/upload-artifact@v3
        with:
          name: war-artifact
          path: target/hello-1.0.war


  # ------------------------------------------------------
  #  3a) Security Scan: OWASP Dependency Check
  # ------------------------------------------------------
  owasp-dependency-check:
    runs-on: ubuntu-latest
    needs: [build-war]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download WAR artifact
        uses: actions/download-artifact@v3
        with:
          name: war-artifact
          path: ./target

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Install OWASP Dependency Check (local folder)
        run: |
          mkdir -p $GITHUB_WORKSPACE/dependency-check
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.3.1/dependency-check-8.3.1-release.zip
          unzip dependency-check-8.3.1-release.zip -d $GITHUB_WORKSPACE/dependency-check
          echo "$GITHUB_WORKSPACE/dependency-check/dependency-check/bin" >> $GITHUB_PATH

      - name: Run OWASP Dependency Check
        run: |
          dependency-check.sh --scan . \
            --format HTML \
            --out ./dependency-check-report.html \
            --failOnCVSS 15

      - name: Upload Report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: dependency-check-report.html

  # ------------------------------------------------------
  #  3b) Code-Style Scan: Checkstyle
  # ------------------------------------------------------
  checkstyle:
    name: Checkstyle
    runs-on: ubuntu-latest
    needs: [build-war]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Restore WAR artifact
        uses: actions/download-artifact@v3
        with:
          name: war-artifact
          path: ./target

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Checkstyle Scan
        run: |
          mvn --batch-mode org.apache.maven.plugins:maven-checkstyle-plugin:3.2.2:check \
            -Dcheckstyle.failOnViolation=false


  # ------------------------------------------------------
  #  4) Docker Build & Push (using PAT)
  # ------------------------------------------------------
  docker-build-push:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [owasp-dependency-check, checkstyle]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Restore WAR artifact
        uses: actions/download-artifact@v3
        with:
          name: war-artifact
          path: ./target

      - name: Log in to Docker Hub (using PAT)
        run: |
          echo "${{ secrets.DOCKERHUB_PAT }}" | docker login -u "marilee" --password-stdin

      - name: Build Docker image
        run: |
          docker build -t "marilee/devops:${{ github.sha }}" .

      - name: Push Docker image
        run: |
          docker push "marilee/devops:${{ github.sha }}"


  # ------------------------------------------------------
  #  5) Deploy to ephemeral environment via Docker + ngrok
  # ------------------------------------------------------
  deploy-ephemeral:
    runs-on: ubuntu-latest
    needs: [docker-build-push]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install localtunnel
        run: |
          sudo apt-get update
          sudo apt-get install -y nodejs npm
          sudo npm install -g localtunnel

      - name: Run your webapp container
        run: |
          docker run -d --rm -p 8080:8080 --name ephemeral-webapp "marilee/devops:${{ github.sha }}"
          # Wait for Tomcat to start
          sleep 15

      - name: Start localtunnel
        run: |
          nohup lt --port 8080 > localtunnel.log 2>&1 &
          sleep 5

      - name: Show localtunnel logs
        run: cat localtunnel.log

      - name: Get localtunnel URL
        id: lt
        run: |
          # localtunnel.log usually has a line "your url is: https://abc.loca.lt"
          export TUNNEL_URL=$(grep 'url is:' localtunnel.log | sed 's/.*url is: //')
          echo "TUNNEL_URL=$TUNNEL_URL" >> $GITHUB_ENV
          echo "::set-output name=url::$TUNNEL_URL"

      - name: Get localtunnel password
        run: |
          LT_PASS=$(curl -s https://loca.lt/mytunnelpassword)
          echo "Localtunnel password: $LT_PASS"
          # Typically you can just echo it. 
          # The user can copy/paste to the localtunnel prompt if they see one.

      - name: Post ephemeral URL as job summary
        run: |
          echo "## Ephemeral Deployment" >> $GITHUB_STEP_SUMMARY
          echo "**URL**: [$TUNNEL_URL]($TUNNEL_URL)" >> $GITHUB_STEP_SUMMARY
          echo "**Tunnel Password**: (see logs above)" >> $GITHUB_STEP_SUMMARY
