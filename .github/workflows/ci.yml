name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # ------------------------------------------------------
  # 1) Build & Test
  # ------------------------------------------------------
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Maven Test
        run: mvn --batch-mode clean test


  # ------------------------------------------------------
  # 2) Build the WAR file
  # ------------------------------------------------------
  build-war:
    name: Build WAR
    runs-on: ubuntu-latest
    needs: [build-test]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Maven Package
        run: mvn --batch-mode clean package

      - name: Archive WAR artifact
        uses: actions/upload-artifact@v3
        with:
          name: war-artifact
          path: target/hello-1.0.war


  # ------------------------------------------------------
  # 3a) Security Scan: OWASP Dependency Check (commented out)
  # ------------------------------------------------------
  owasp-dependency-check:
    runs-on: ubuntu-latest
    needs: [build-war]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # (commented out steps)
      # ...
      # (end of commented out steps)

  # ------------------------------------------------------
  # 3b) Code-Style Scan: Checkstyle (commented out)
  # ------------------------------------------------------
  checkstyle:
    name: Checkstyle
    runs-on: ubuntu-latest
    needs: [build-war]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # (commented out steps)
      # ...
      # (end of commented out steps)

  # ------------------------------------------------------
  # 4) Docker Build & Push (using PAT)
  # ------------------------------------------------------
  docker-build-push:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [owasp-dependency-check, checkstyle]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Restore WAR artifact
        uses: actions/download-artifact@v3
        with:
          name: war-artifact
          path: ./target

      - name: Log in to Docker Hub (using PAT)
        run: |
          echo "${{ secrets.DOCKERHUB_PAT }}" | docker login -u "marilee" --password-stdin

      - name: Build Docker image
        run: |
          docker build -t "marilee/devops:${{ github.sha }}" .

      - name: Push Docker image
        run: |
          docker push "marilee/devops:${{ github.sha }}"

  # ------------------------------------------------------
  # 5) Deploy GCP VM with Terraform + Ansible
  # ------------------------------------------------------
  deploy-gcp-ephemeral:
    runs-on: ubuntu-latest
    needs: [docker-build-push]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      # 1) Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 2) Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      # 3) Terraform Init/Plan/Apply
      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve

      # 4) Grab the public IP
      - name: Get Public IP
        id: get-ip
        run: |
          IP=$(terraform output -raw public_ip)
          echo "PUBLIC_IP=$IP" >> $GITHUB_ENV

      # 5) Install gcloud CLI
      - name: Install gcloud CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y google-cloud-sdk

      # 6) Generate ephemeral SSH key
      - name: Generate ephemeral SSH key
        run: |
          ssh-keygen -t rsa -b 4096 -f ephemeral_key -N ""
          ls -l ephemeral_key*

      # 7) Add the public key to OS Login (15m TTL)
      - name: Add SSH key to OS Login
        run: |
          gcloud compute os-login ssh-keys add \
            --key-file=ephemeral_key.pub \
            --ttl=15m

      # 8) Install Ansible
      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible

      # 9) Create an Ansible inventory
      - name: Ansible inventory
        run: |
          echo "[ephemeral]" > inventory
          echo "$PUBLIC_IP ansible_ssh_common_args='-o StrictHostKeyChecking=no' ansible_user=$(gcloud config get-value account)" >> inventory
          cat inventory

      # 10) Ansible: install Docker & run container
      - name: Run Ansible
        run: |
          ansible-playbook -i inventory ansible/setup.yml \
            --private-key ephemeral_key

      # 11) Sleep so we can test
      - name: Sleep
        run: |
          echo "App is at http://$PUBLIC_IP:8080"
          sleep 300

