name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # ------------------------------------------------------
  #  1) Build & Test
  # ------------------------------------------------------
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Maven Test
        run: mvn --batch-mode clean test


  # ------------------------------------------------------
  #  2) Build the WAR file
  # ------------------------------------------------------
  build-war:
    name: Build WAR
    runs-on: ubuntu-latest
    needs: [build-test]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Maven Package
        run: mvn --batch-mode clean package

      - name: Archive WAR artifact
        uses: actions/upload-artifact@v3
        with:
          name: war-artifact
          path: target/hello-1.0.war

  # ------------------------------------------------------
  #  3a) Security Scan: OWASP Dependency Check
  # ------------------------------------------------------
  owasp-dependency-check:
    runs-on: ubuntu-latest
    needs: [build-war]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download WAR artifact
        uses: actions/download-artifact@v3
        with:
          name: war-artifact
          path: ./target

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Install OWASP Dependency Check (local folder)
        run: |
          mkdir -p $GITHUB_WORKSPACE/dependency-check
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.3.1/dependency-check-8.3.1-release.zip
          unzip dependency-check-8.3.1-release.zip -d $GITHUB_WORKSPACE/dependency-check
          echo "$GITHUB_WORKSPACE/dependency-check/dependency-check/bin" >> $GITHUB_PATH

      - name: Remove old DC data
        run: rm -rf /tmp/dc-data || true

      - name: Make fresh DC folder
        run: mkdir -p /tmp/dc-data

      - name: Run OWASP Dependency Check
        env:
          JAVA_OPTS: "-Xmx2g"
        run: |
          dependency-check.sh \
            --data /tmp/dc-data \
            --scan . \
            --format HTML \
            --out ./dependency-check-report.html \
            --failOnCVSS 15

      - name: Upload Report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: dependency-check-report.html

  # ------------------------------------------------------
  #  3b) Code-Style Scan: Checkstyle
  # ------------------------------------------------------
  checkstyle:
    name: Checkstyle
    runs-on: ubuntu-latest
    needs: [build-war]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Restore WAR artifact
        uses: actions/download-artifact@v3
        with:
          name: war-artifact
          path: ./target

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Checkstyle Scan
        run: |
          mvn --batch-mode org.apache.maven.plugins:maven-checkstyle-plugin:3.2.2:check \
            -Dcheckstyle.failOnViolation=false


  # ------------------------------------------------------
  #  4) Docker Build & Push (using PAT)
  # ------------------------------------------------------
  docker-build-push:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [owasp-dependency-check, checkstyle]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Restore WAR artifact
        uses: actions/download-artifact@v3
        with:
          name: war-artifact
          path: ./target

      - name: Log in to Docker Hub (using PAT)
        run: |
          echo "${{ secrets.DOCKERHUB_PAT }}" | docker login -u "marilee" --password-stdin

      - name: Build Docker image
        run: |
          docker build -t "marilee/devops:${{ github.sha }}" .

      - name: Push Docker image
        run: |
          docker push "marilee/devops:${{ github.sha }}"


  # ------------------------------------------------------
  #  5) Deploy to ephemeral environment via Docker + ngrok
  # ------------------------------------------------------
  deploy-gcp-ephemeral:
    name: Deploy GCP Ephemeral VM
    runs-on: ubuntu-latest
    needs: [docker-build-push]

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      # 1) Authenticate to GCP using service account
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 2) Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      # 3) Terraform Init
      - name: Terraform Init
        run: terraform init

      # 4) Terraform Plan
      - name: Terraform Plan
        run: terraform plan

      # 5) Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve

      # 6) Grab the public IP from Terraform output
      - name: Get Public IP
        id: get-ip
        run: |
          IP=$(terraform output -raw public_ip)
          echo "PUBLIC_IP=$IP" >> $GITHUB_ENV
        shell: bash

      # 7) Sleep for 60s so user can test the app
      - name: Sleep to Allow Testing, click me
        run: |
          echo "Public IP is $PUBLIC_IP. You can browse http://$PUBLIC_IP:8080"
          echo "Sleeping 120 seconds. Explore the app now!"
          sleep 120

      # 8) Terraform Destroy
      - name: Terraform Destroy
        run: terraform destroy -auto-approve